package ca.uqac.lif.texlint;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import ca.uqac.lif.texlint.as.AnnotatedString;

/**
 * Object in charge of evaluating a set of rules on a piece of text.
 * 
 * @author Sylvain Hall√©
 *
 */
public class Linter 
{
	/**
	 * The list of rules that will be evaluated
	 */
	protected List<Rule> m_rules;
	
	/**
	 * The list of rules that will be evaluated
	 */
	protected List<Rule> m_rulesDetexed;
	
	/**
	 * Creates a new empty linter object
	 */
	public Linter()
	{
		super();
		m_rules = new ArrayList<Rule>();
		m_rulesDetexed = new ArrayList<Rule>();
	}
	
	/**
	 * Adds a new rule to the linter, which should apply to the original
	 * text.
	 * @param r The rule to add
	 * @return This linter
	 */
	public Linter add(/*@ non_null @*/ Rule r)
	{
		m_rules.add(r);
		return this;
	}
	
	/**
	 * Adds new rules to the linter, which should apply to the original
	 * text.
	 * @param r The rules to add
	 * @return This linter
	 */
	public Linter add(/*@ non_null @*/ Collection<Rule> r)
	{
		m_rules.addAll(r);
		return this;
	}
	
	/**
	 * Adds a new rule to the linter, which should apply on the clean
	 * ("detexed") text.
	 * @param r The rule to add
	 * @return This linter
	 */
	public Linter addDetexed(/*@ non_null @*/ Rule r)
	{
		m_rulesDetexed.add(r);
		return this;
	}
	
	/**
	 * Adds new rules to the linter, which should apply on the clean
	 * ("detexed") text.
	 * @param r The rules to add
	 * @return This linter
	 */
	public Linter addDetexed(/*@ non_null @*/ Collection<Rule> r)
	{
		m_rulesDetexed.addAll(r);
		return this;
	}
	
	/**
	 * Evaluates all the rules added to the linter on a given string, and
	 * collects the advice these rules generate.
	 * @param s The string on which to evaluate the rules
	 * @return The list of advice generated by these rules
	 */
	/*@ non_null @*/ List<Advice> evaluateAll(/*@ non_null @*/ AnnotatedString s)
	{
		List<Advice> out_list = new ArrayList<Advice>();
		for (Rule r : m_rules)
		{
			out_list.addAll(r.evaluate(s, s));
		}
		AnnotatedString s_detexed = new Detexer().detex(s);
		for (Rule r : m_rulesDetexed)
		{
			out_list.addAll(r.evaluate(s_detexed, s));
		}
		return out_list;
	}
}
