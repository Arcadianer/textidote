/*
    TeXtidote, a linter for LaTeX documents
    Copyright (C) 2018  Sylvain Hallé

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package ca.uqac.lif.textidote;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import ca.uqac.lif.textidote.as.AnnotatedString;
import ca.uqac.lif.textidote.cleaning.TextCleaner;
import ca.uqac.lif.textidote.cleaning.TextCleanerException;

/**
 * Object in charge of evaluating a set of rules on a piece of text.
 * 
 * @author Sylvain Hallé
 *
 */
public class Linter 
{
	/**
	 * The list of rules that will be evaluated
	 */
	protected List<Rule> m_rules;
	
	/**
	 * The list of rules that will be evaluated
	 */
	protected List<Rule> m_rulesDetexed;
	
	/**
	 * The detexer used to clean the document
	 */
	protected TextCleaner m_cleaner;
	
	/**
	 * Creates a new empty linter object
	 */
	public Linter(/*@ non_null @*/ TextCleaner cleaner)
	{
		super();
		m_rules = new ArrayList<Rule>();
		m_rulesDetexed = new ArrayList<Rule>();
		m_cleaner = cleaner;
	}
	
	/**
	 * Adds a new rule to the linter, which should apply to the original
	 * text.
	 * @param r The rule to add
	 * @return This linter
	 */
	public Linter add(/*@ non_null @*/ Rule r)
	{
		m_rules.add(r);
		return this;
	}
	
	/**
	 * Adds new rules to the linter, which should apply to the original
	 * text.
	 * @param r The rules to add
	 * @return This linter
	 */
	public Linter add(/*@ non_null @*/ Collection<Rule> r)
	{
		m_rules.addAll(r);
		return this;
	}
	
	/**
	 * Adds a new rule to the linter, which should apply on the clean
	 * ("detexed") text.
	 * @param r The rule to add
	 * @return This linter
	 */
	public Linter addDetexed(/*@ non_null @*/ Rule r)
	{
		m_rulesDetexed.add(r);
		return this;
	}
	
	/**
	 * Adds new rules to the linter, which should apply on the clean
	 * ("detexed") text.
	 * @param r The rules to add
	 * @return This linter
	 */
	public Linter addDetexed(/*@ non_null @*/ Collection<Rule> r)
	{
		m_rulesDetexed.addAll(r);
		return this;
	}
	
	/**
	 * Evaluates all the rules added to the linter on a given string, and
	 * collects the advice these rules generate.
	 * @param s The string on which to evaluate the rules
	 * @return The list of advice generated by these rules
	 * @throws LinterException Thrown if a problem occurs during the linting
	 * process
	 */
	/*@ non_null @*/ List<Advice> evaluateAll(/*@ non_null @*/ AnnotatedString s) throws LinterException
	{
		List<Advice> out_list = new ArrayList<Advice>();
		try
		{
			AnnotatedString s_decommented = m_cleaner.cleanComments(new AnnotatedString(s));
			for (Rule r : m_rules)
			{
				out_list.addAll(r.evaluate(s_decommented, s));
			}
			AnnotatedString s_detexed = m_cleaner.clean(s);
			for (Rule r : m_rulesDetexed)
			{
				out_list.addAll(r.evaluate(s_detexed, s));
			}
			return out_list;
		}
		catch (TextCleanerException e)
		{
			// Abort
			throw new LinterException(e);
		}
	}
	
	/**
	 * Gets the instance of detexer used by this linter.
	 * @return The detexer
	 */
	/*@ pure non_null */ public TextCleaner getTextCleaner()
	{
		return m_cleaner;
	}
}
